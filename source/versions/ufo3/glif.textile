<div class="section">

h1. Glyph Interchange Format

| *File Format* | XML |

The Glyph Interchange Format (GLIF) is a simple and clear XML representation of a single glyph. GLIF files typically have a _.glif_ extension.

The GLIF data follows this structure:

<ul class="treediagram">
  <li class="treediagram">glyph</li>
  <ul class="treediagram">
    <li class="treediagram">advance</li>
    <li class="treediagram">unicode</li>
    <li class="treediagram">lib</li>
    <li class="treediagram">guideline</li>
    <li class="treediagram">image</li>
    <li class="treediagram">outline</li>
    <ul class="treediagram">
      <li class="treediagram">contour</li>
      <ul class="treediagram">
        <li class="treediagram">point</li>
      </ul>
      <li class="treediagram">component</li>
      <li class="treediagram">link</li>
      <ul class="treediagram">
        <li class="treediagram">linkref</li>
      </ul>
    </ul>
  </ul>
</ul>

h2. Specification

h3. &lt;glyph&gt; The top level element.

h4. Attributes

|_. attribute name |_. description |
| name             | The name of the glyph |
| format           | The format version. 2 for this version. |

The _name_ attribute has limited uses in this version. The _contents.plist_ file maps glyph names to file names, and one of the reasons to do this is to avoid having to parse all files just to get at a list of available glyph names. When reading GLIF files, the _name_ attribute is probably best ignored <span class="inlineeditorsnote">(this should be more strongly worded)</span>, since manual editing may have caused a mismatch with the glyph name as stored in _contents.plist_, as well as with the file name, which is an algorithmic transformation of the glyph name. This attribute may become more useful in future versions of GLIF.

h4. Child Elements

|_. element name |_. description |
| advance        | May occur at most once. |
| unicode        | May occur any number of times. |
| outline        | May occur at most once. |
| lib            | May occur at most once. |


h3. &lt;advance&gt;  Horizontal and vertical metrics.

h4. Attributes

|_. attribute name |_. data type      |_. description |
| width            | integer or float | The advance width. |
| height           | integer or float | The vertical advance. |

h4. This element has no child elements.


h3. &lt;unicode&gt; Unicode code point.

h4. Attributes

|_. attribute name |_. description |
| hex | A unicode code point as a hexadecimal number. |

h4. This element has no child elements.

The first occurrence of this element defines the primary unicode value for this glyph.


h3. &lt;image&gt;  An image reference.

This optional element represents an image element in a glyph. It may occur at most once. The image is always considered to be _behind_ the outline element.

<div class="implementationnote">
From an implementation perspective, images are quite complex. We either need to define a new pen like protocol for working with images or we need to define a standard API for getting and setting image data from/to glyphs.
</div>

h4. Attributes

|_. attribute name |_. data type |_. description |_. default value |
| fileName         | string      | The image file name. | None |
| directory        | string      | The directory the image is stored in. If this is not given, the image must be stored in the _images_ directory within the UFO. <span class="inlineeditorsnote">Is this path relative to the UFO, file system or something else?</span> | None |
| xScale           | integer or float | See below. | 1 |
| xyScale          | integer or float | See below. | 0 |
| yxScale          | integer or float | See below. | 0 |
| yScale           | integer or float | See below. | 1 |
| xOffset          | integer or float | See below. | 0 |
| yOffset          | integer or float | See below. | 0 |
| color            | string | The color that should be applied to the image. The format follows the "color definition":#color standard. This attribute is optional. If no color is provided, the image should be drawn using the colors stored in the image data. <span class="inlineeditorsnote">This needs to address color setting at the layerinfo.plist level.</span> | None |

xScale, xyScale, yxScale, yScale, xOffset, yOffset taken together in that order form an Affine transformation matrix, to be used to transform the image. The default matrix is [1 0 0 1 0 0], the identity transformation.

h4. This element has no child elements.

h5. Coloring Images

If a color is to be applied to an image, as a result of a color attribute in an image element or a layer fill color attribute in "layerinfo.plist":#layerinfo, the application displaying the image should convert the image to grayscale and then apply the color.


h3. &lt;guideline&gt; A reference guideline.

This element may occur any number of times.

h4. Attributes

|_. attribute name |_. data type      |_. description |_. default value |
| x                | integer or float | The 'x' coordinate. | None. Optional if _y_ is provided and _angle_ is not provided. See below for details. |
| y                | integer or float | The 'y' coordinate. | None. Optional. See below for details. |
| angle            | integer or float | The angle of the guideline. This must be a value between 0 and 360 in a clockwise direction. If x or y are not specified, the angle must not be specified. If it is specified in this case, it should be ignored.| None |
| name             | string           | An arbitrary name for the guideline. This attribute is optional.  | None |
| color            | string           | The color that should be applied to the guideline. The format follows the "color definition":#color standard. This attribute is optional. | None |

The guideline extends along _angle_ to infinity in both directions out of the point defined by _x_ and _y_. If _y_ and _angle_ are omitted, the element represents a vertical guideline. If _x_ and _angle_ are omitted, the element represents a horizontal guideline. If _y_ is omitted and _angle_ if provided, _y_ is zero. If _x_ is omitted and _angle_ is provided, _x_ is zero.

<div class="discussionnote">
A proposed alternative format is to omit the the angle as described above and provide two pairs of x and y coordinates. The angle would be inferred from the two points. The argument for this is that it is potentially more precise. The arguments against it are that the precision difference is very small if it even exists and it is more data.
</div>

<div class="implementationnote">
Implementing this should be relatively easy. The guides could be stored in a list at attribute "guides" and glifLib could set/get them to/from there. Or pens and point pens could gain an addGuide method. The latter could be a breaking change though.

This is going to require defining an API or protocol. It seems that we should find a place to publish the various protocols and APIs to ensure interoperability. Perhaps another section of this site, completely separate from the specifications, would be good.
</div>

h4. Child Elements

This element has no child elements.


h3. &lt;outline&gt; Outline description.

h4. This element has no attributes.

h4. Child Elements

|_. element name |_. description |
| component      | May occur any number of times. |
| contour        | May occur any number of times. |


h3. &lt;component&gt; Insert another glyph as part of the outline.

h4. Attributes

|_. attribute name |_. data type      |_. description          |_. default value |
| base             | string           | Name of the base glyph | None |
| xScale           | integer or float | See below.             | 1 |
| xyScale          | integer or float | See below.             | 0 |
| yxScale          | integer or float | See below.             | 0 |
| yScale           | integer or float | See below.             | 1 |
| xOffset          | integer or float | See below.             | 0 |
| yOffset          | integer or float | See below.             | 0 |
| name             | string           | Arbitrary name or label for this component. The name does not have to be unique within an outline. | None |

xScale, xyScale, yxScale, yScale, xOffset, yOffset taken together in that order form an Affine transformation matrix, to be used to transform the base glyph. The default matrix is [1 0 0 1 0 0], the identity transformation.

When multiple glyphs directories are in the font, a component may only reference a glyph within the same glyphs directory that contains the glyph that contains the component.

<div class="implementationnote">
The name attribute will require modification to pens, the pen protocol, point pens and the point pen protocol. For pens, the change could be handled as the contour name is handled (described above). The point pen change could be handled the same way.
</div>

h4. This element has no child elements.

h3. &lt;contour&gt; Contour description.

h4. Attributes

|_. attribute name |_. data type |_. description |_. default value |
| name             | string      | Arbitrary name or label for this contour. The name does not have to be unique within an outline. | None |

<div class="implementationnote">
The name attribute will require a modification to pens and the pen protocol. It seems that the easiest way to do this will be to modify the moveTo and _moveTo methods to accept an optional name attribute. This shouldn't be a problem in the moveTo method since it is implemented in the base class and subclasses are not supposed to override it. In the case of _moveTo it could be a breaking change. If a pen hasn't been updated to accept the name attribute, an error will occur. We could work around this in the glifLib, RoboFab and defcon draw methods with a try: except: wrapper. For a year the except would raise a deprecation warning. This would give people time to update their pens.

The name attribute will also require a modification to point pen and the point pen protocol. The addPoint method could be modified to take a contourName attribute. This shouldn't be a breaking change as the base point pen has **kwargs and all implementations should have copied that. The only issue here is determining when this attribute could be something other than None. Perhaps when the segmentType is "move"?

Both of these implementations fail in the case of a quadratic contour that has no on-curve points. I'm not sure how to get around that.
</div>

h4. Child Elements

|_. element name |_. description |
| point          | May occur any number of times. |


h3. &lt;point&gt; An attributed coordinate pair.

h4. Attributes

|_. attribute name |_. data type      |_. description |_. default value |
| x                | integer or float | The 'x' coordinate. | None |
| y                | integer or float | The 'y' coordinate. | None |
| type             | string           | The point and/or segment type. The options are detailed below. | offcurve |
| smooth           | string           | This attribute can only be given when _type_ indicates the point is on-curve. When set to _yes_, it signifies that a smooth curvature should be maintained at this point, either as a _curve point_ or a _tangent point_ in Fontographer terms. | no |
| name             | string           | Arbitrary name or label for this point. The name does not have to be unique within a contour, nor within an outline. | None |

h4. This element has no child elements.

h5. Point Types

| move     | A point of this type MUST be the first in a _contour_. The reverse is not true: a _contour_ does not necessarily start with a _move_ point. When a _contour_ *does* start with a _move_ point, it signifies the beginning of an *open* contour. A *closed* contour does *not* start with a _move_ and is defined as a cyclic list of points, with no predominant start point. There is always a _next point_ and a _previous point_. For this purpose the list of points can be seen as endless in both directions. The actual list of points can be rotated arbitrarily (by removing the first N points and appending them at the end) while still describing the same outline. |
| line     | Draw a straight line from the previous point to this point. The previous point may be a _move_, a _line_, a _curve_ or a _qcurve_, but not an _offcurve_. |
| offcurve | This point is part of a curve segment, that goes up to the next point that is either a _curve_ or a _qcurve_. |
| curve    | Draw a cubic bezier curve from the last non-_offcurve_ point to this point. If the number of _offcurve_ points is zero, a straight line is drawn. If it is one, a quadratic curve is drawn. If it is two, a regular cubic bezier is drawn. If it is larger than 2, a series of cubic bezier segments are drawn, as defined by the _Super Bezier_ algorithm. |
| qcurve   | Similar to curve, but uses quadratic curves, using the TrueType "implied on-curve points" principle. |


h3. &lt;link&gt; A collection of point references.

Links are arbitrary collections of point references. These can represent anything that can be described as a list of points--TrueType hints, Postscript hints, interpolation markers, etc. The GLIF specification does not define the behavior of links within a specific binary format. The _link_ element may contain a _type_ string that applications can use to define what a particular link represents.

This element may occur any number of times.

<div class="implementationnote">
Links are going to be a challenge to implement. There are two challenges: 1. How are they read from and written to a glyph object? Pen? Defined API and data structure? 2. How are they to be interpreted? In ufo2fdk it might be good to allow manual hinting via links. How will the package know which links to pay attention to? What is the structure of those links?

*Reading and Writing*
We could add an addLink(contourAndPointNamePairs, type, name=None) method pen and pointPen. This would be a breaking change that we could mitigate with try: except: and a deprecation warning while pens are still being updated. This raises the question: are links part of the outline? Pens are for transmitting outline data. The advantage with adding a method to the pens is that the responsibility for iterating and coercing to the proper structure is the duty of the appropriate object's draw and drawPoints methods.

Alternatively, we could set a new protocol for a standard links attribute and the linkref objects it contains. The advantage with this is that it won't break any pens. The disadvantage is that it gives glifLib more work to do.

*Interpretation*
If we have a standard link object, we need to have some standard structures that cover common uses. We can't make everything completely arbitrary because it will be too difficult for anything other than the creator of a particular link to interpret. It seems that define two things would alleviate the ambiguity and promote interoperability.

First, we need to define a type naming scheme. Broadly, there are two types of links: links that are application specific and links that are not. In the case of application specific links, the type should be defined with a reverse domain naming scheme. @com.typesupply.SomeTool.Serif@. This way the maker of the link can identify the link as uniquely its own. Other applications can quickly see that the link type is unknown and choose to not display or display it in a generic way. For links that are not application specific, the @public.**@ naming scheme would be used. We would have a list of defined link types in the UFO specification.

Secondly, for these public.* links, we would need to define what the link would contain and how it should be interpreted. Some examples:

| public.horizontalStem | Two or more points defining a horizontal stem. Within the points there must be two unique y coordinates. |
| public.verticalStem | Two or more points defining a vertical stem. Within the points there must be two unique x coordinates. |
| public.counter | Two or more points defining a counter. |
| public.postscriptHintMask | (Definition from the T2 Charstring spec.) |
| public.postscriptCounterMask | (Definition from the T2 Charstring spec.) |

This puts us in the position of managing a registry, but it would only be for public types so it shouldn't be too complicated.

*objectsFL*
It is going to be quite a task to implement in FontLab 5. There are some hinting objects that could be abstracted into links via the RoboFab API. Those could then be written to and read from UFOs. I suppose that we could simulate point and contour names with str(index) for the object in question. This seems very fragile.

*Keeping Links Up To Date*
Another thing we need to consider in the implementation is how links are kept up to date. When a point name changes, should teh link be automatically updated? If a referenced point is deleted, what should happen to the link?
</div>

h4. Child Elements

|_. element name |_. description |
| linkref        | Must occur at least twice. |

h4. Attributes

|_. attribute name |_. data type |_. description |
| type             | string      | Optional. An arbitrary string describing the type of link. |
| name             | string      | Optional. Arbitrary name or label for this link. The name does not have to be unique. |

h5. Notes

This seems very open ended. This is both a good thing and a bad thing. On the one hand it makes many, many things possible. On the other hand, because there is no defined correlation with font binary data structures, the links could ultimately become application specific blobs. We need to give this some thought. We could have a list of common types: stem, counter, x-height and so on. Applications would be free to do with those as they wish, but at least the types would be abstract enough to be portable.

h4. Example

<pre class="prettyprint">
&lt;link type=&quot;vertical-stem&quot; name="stem 1"&gt;
  &lt;linkref contour=&quot;Contour 1&quot; point=&quot;Point 4&quot;/&gt;
  &lt;linkref contour=&quot;Contour 1&quot; point=&quot;Point 8&quot;/&gt;
&lt;/link&gt;
</pre>

h3. &lt;linkref&gt; A reference to a particular point in the glyph.

This element must occur at least twice.

This element has no child elements.

h4. Attributes

|_. attribute name |_. data type |_. description |
| contour          | string      | The name of the contour being referenced. This corresponds to the name attribute of the contour element. |
| point            | string      | The name of the point being referenced. This corresponds to the name attribute of the point element. |

h5. Notes

Are contour and point always required? Should we add a component attribute?


h3. &lt;lib&gt; Custom data storage.

This element is structure is defined as a Property List. This element may occur at most once. lib has exactly one child, which must be _dict_. To avoid naming conflicts, keys should use the Reverse Domain Naming Convention defined for "lib.plist":../filestructure/lib.html.


h3. Example

<pre class="prettyprint">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;glyph name=&quot;period&quot; format=&quot;1&quot;&gt;
  &lt;advance width=&quot;268&quot;/&gt;
  &lt;unicode hex=&quot;002E&quot;/&gt;
  &lt;outline&gt;
    &lt;contour&gt;
      &lt;point x=&quot;237&quot; y=&quot;152&quot;/&gt;
      &lt;point x=&quot;193&quot; y=&quot;187&quot;/&gt;
      &lt;point x=&quot;134&quot; y=&quot;187&quot; type=&quot;curve&quot; smooth=&quot;yes&quot;/&gt;
      &lt;point x=&quot;74&quot; y=&quot;187&quot;/&gt;
      &lt;point x=&quot;30&quot; y=&quot;150&quot;/&gt;
      &lt;point x=&quot;30&quot; y=&quot;88&quot; type=&quot;curve&quot; smooth=&quot;yes&quot;/&gt;
      &lt;point x=&quot;30&quot; y=&quot;23&quot;/&gt;
      &lt;point x=&quot;74&quot; y=&quot;-10&quot;/&gt;
      &lt;point x=&quot;134&quot; y=&quot;-10&quot; type=&quot;curve&quot; smooth=&quot;yes&quot;/&gt;
      &lt;point x=&quot;193&quot; y=&quot;-10&quot;/&gt;
      &lt;point x=&quot;237&quot; y=&quot;25&quot;/&gt;
      &lt;point x=&quot;237&quot; y=&quot;88&quot; type=&quot;curve&quot; smooth=&quot;yes&quot;/&gt;
    &lt;/contour&gt;
  &lt;/outline&gt;
  &lt;lib&gt;
    &lt;dict&gt;
      &lt;key&gt;com.letterror.somestuff&lt;/key&gt;
      &lt;string&gt;arbitrary custom data!&lt;/string&gt;
    &lt;/dict&gt;
  &lt;/lib&gt;
&lt;/glyph&gt;
</pre>

</div>