<div class="section">

h1. UFO 3

h4. Draft 4: XXX

The UFO 3 specification is currently in early development. This document describes the _changes_ to the UFO 2 specification. As such, this is not a complete specification. In no way a final draft and everything is subject to change. "Please contact the spec maintainers if you have any comments about this draft.":team.html

<div class="discussionnote">
Points of contention in this document have notes like this explaining the differing points of view. These are ongoing discussions that will be resolved before the specification is final.
</div>

<div class="implementationnote">
We have found it helpful to think about the implementation of this spec in our own code, notably ufoLib, glifLib, RoboFab and defcon. Throughout this document, notes about how we think we can/will implement things are highlighted in sections like this. These are not and will not be part of the official specification. They are here purely to help keep the specification grounded in reality.
</div>

UFO 3 contains a number of major additions along with some enhancements to the pervious specification. In short, the UFO now supports "layers":#layers, "images":#layertypes, "layer-level":#layerinfo and "glyph-level":#glyphguides guidelines, "point links":#pointlinks, "GLIF":#GLIF has some changes, "fontinfo.plist":#fontinfo has some new properties and there is a new "data directory":#data for storing large amounts of arbitrary data.

The file structure in this draft looks like this:

<ul class="filediagram">
  <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> &#42;.ufo</li>
  <ul class="filediagram-nested">
    <li class="filediagram-file">metainfo.plist</li>
    <li class="filediagram-file">fontinfo.plist</li>
    <li class="filediagram-file">groups.plist</li>
    <li class="filediagram-file">kerning.plist</li>
    <li class="filediagram-file">features.plist</li>
    <li class="filediagram-file">lib.plist</li>
    <li class="filediagram-file">layercontents.plist</li>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> glyphs</li>
    <ul class="filediagram-nested">
      <li class="filediagram-file">contents.plist</li>
      <li class="filediagram-file">layerinfo.plist</li>
      <li class="filediagram-file">&#42;.glif</li>
    </ul>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> glyphs.&#42;</li>
    <ul class="filediagram-nested">
      <li class="filediagram-file">contents.plist</li>
      <li class="filediagram-file">layerinfo.plist</li>
      <li class="filediagram-file">&#42;.glif</li>
    </ul>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> images</li>
    <ul class="filediagram-nested">
      <li class="filediagram-file">&#42;.png</li>
    </ul>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9654;</span> data</li>
  </ul>
</ul>

</div>


<div class="section">

h2(#layers). Layers

The biggest change in UFO 3 is that the UFO now supports layers. These layers can be used for anything--the standard _main+background_ drawing environment, multi-layered fonts, glyph revision history and so on. The UFO layering system is designed to be conceptually unrestricted. However, this does not mean that layers should be used to store an entire family of weights within a single UFO. The UFO is a single style file format, not a family format.

Layers are implemented as a series of glyph sets within the UFO. There is one required layer--the _glyphs_ directory. This directory is considered the primary outline source of the font. Additional layers are represented as additional directories that adhere to the naming convention of _glyphs.&#42;_ where _&#42;_ is a unique, case-insensitive, file-system legal string.

The top level of the UFO gains one new file, "layercontents.plist":#layercontents This file maps layer directory names to layer names. Each layer may have a "layerinfo.plist":#layerinfo file. Each layer may contain glyphs that are or are not part of other layers. The structure of the UFO, as it relates to layers, looks like this:

<ul class="filediagram">
  <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> &#42;.ufo</li>
  <ul class="filediagram-nested">
    <li class="filediagram-file">layercontents.plist</li>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> glyphs</li>
    <ul class="filediagram-nested">
      <li class="filediagram-file">contents.plist</li>
      <li class="filediagram-file">layerinfo.plist</li>
      <li class="filediagram-file">&#42;.glif</li>
    </ul>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> glyphs.&#42;</li>
    <ul class="filediagram-nested">
      <li class="filediagram-file">contents.plist</li>
      <li class="filediagram-file">layerinfo.plist</li>
      <li class="filediagram-file">&#42;.glif</li>
    </ul>
  </ul>
</ul>

For example, this UFO contains three layers--the main layer, a layer named "Reference" and another named "Old Sketches":

<ul class="filediagram">
  <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> &#42;.ufo</li>
  <ul class="filediagram-nested">
    <li class="filediagram-file">layercontents.plist</li>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> glyphs</li>
    <ul class="filediagram-nested">
      <li class="filediagram-file">contents.plist</li>
      <li class="filediagram-file">layerinfo.plist</li>
      <li class="filediagram-file">A.glif</li>
      <li class="filediagram-file">B.glif</li>
    </ul>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> glyphs.reference</li>
    <ul class="filediagram-nested">
      <li class="filediagram-file">contents.plist</li>
      <li class="filediagram-file">layerinfo.plist</li>
      <li class="filediagram-file">A.glif</li>
      <li class="filediagram-file">B.glif</li>
    </ul>
    <li class="filediagram-directory"><span class="filediagram-arrow">&#9660;</span> glyphs.old_sketches</li>
    <ul class="filediagram-nested">
      <li class="filediagram-file">contents.plist</li>
      <li class="filediagram-file">layerinfo.plist</li>
      <li class="filediagram-file">A.glif</li>
      <li class="filediagram-file">B.glif</li>
      <li class="filediagram-file">C.glif</li>
    </ul>
  </ul>
</ul>
</div>

<div class="section">

h2(#color). Color Definitions

Several elements have a color attribute that defines a color value to be applied to the element. A color definition is defined as a string containing a comma-separated sequence of four integers or floats between 0 and 1. White space characters are allowed around the numerical values. The values in the string define the red, green, blue and alpha components of the color. The color is always specified in the "sRGB":http://en.wikipedia.org/wiki/SRGB color space.

<div class="discussionnote">
This needs a more clear definition in table form.
</div>
</div>


<div class="section">

h2(#compactufo). Compact UFO

<div class="discussionnote">
A couple of people have asked about creating a compacted version of the UFO. The easiest way to do this would be to put the contents of the UFO into a zip archive. On a general level, this seems easy enough to do in the specification, there are precedents for compacting packages this way and there would be some benefits for the user. However, the implementation of this will be complicated for applications.

By design the UFO doesn't place a limit on how many glyphs can be in a font, so there could be lots and lots of GLIF files within a UFO. (Modern file systems would allow for up to 4,294,967,295 GLIF files.) The nice thing about the existing UFO structure is that it allows for very efficient management of the GLIF files. Not all glyphs must be loaded all of the time and saving procedures are very simple--if a glyph is to be removed, it is removed with an operating system call; if a glyph is unchanged since loading, the existing GLIF doesn't need to be resaved; a "save as" operation can be initiated with a directory tree copy. Our experiments with creating a compact version of the UFO, for example inside of a zip archive, have indicated that the aforementioned simplicity is no longer available. In the case of zip archives, files cannot be programmatically removed from or replaced in an existing zip. (At least they can't with the Python API.) This means that the entire contents of the UFO must be rewritten with each save. If there are a large number of glyphs, this could introduce serious memory issues. One way around this may be to do a directory tree copy to a temporary location, make the UFO changes, recompress and replace the existing file. This could lead to serious performance issues, so it needs to be studied before moving forward with this addition to the specification.


While this is under consideration, it is unlikely to make it into the UFO 3 specification.
</div>
</div>